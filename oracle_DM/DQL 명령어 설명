DQL 명령어 설명
(Data Query Languge)
데이터 베이스에서 검색하고 조회하는데 사용
DQL SELECT 문을 사용해서 데이터를 검색하고 필터릴하며 원하는 정보를 추출하는데 사용

종류
SELECT : 테이블에서 데이터를 선택하고 반환 
         필드 목록, 테이블, 조건 및 정렬을 지정할 수 있음
FROM : SELECT 문에서 데이터를 검색할 대상 테이블을 지정
  예제코드) SELECT * FROM 테이블명;
WHERE: 검색 결과를 필터링하기 위한 조건을 지정
       특정 조건을 충족하는 행만 반환 
  예제코드) SELECT 보기원하는 열 작성
           FROM 테이블명
           WHERE 조건작성;
GROUP BY : 검색 결과를 그룹화하고 그룹 단위로 데이터를 집계할 때 사용
  예제코드) SELECT 열이름, AVG(열이름) AS 표시하고 싶은 열의 이름
           FROM 테이블명
           GROUP BY 집계할 열이름;
HAVING : GROUP BY와 함께 사용되며, 그룹화된 데이터에 대한 조건을 지정
         조건을 충족하는 그룹만 반환
  예제코드) SELECT 열이름, AVG(열이름) AS 표시하고 싶은 열의 이름
           FROM 테이블명
           GROUP BY 집계할 열이름
           HAVING AVG (열이름) > 10.0; --조건지정
ORDER BY : 검색 결과를 정렬화하기 위해 사용
           정렬할 열 및 정력 순서를 지정
   예제코드) SELECT 열이름
            FROM 테이블명
            ORDER BY 열이름 DESC; --ASC;
    --ASC : 오름차순(Default 값)
    --DESC : 내림차순
UNION : 두 개 이상의 SELECT문 결과를 결합해서 하나의 결과 집합으로 반환 
   예제코드) SELECT 열이름 FROM 테이블1
            UNION
            SELECT 열이름 FROM 테이블2;
JOIN : 다수의 테이블을 연결하여 데이터를 결합하는데 사용 
       INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN 등 결합 유형이 다양함 
   예제코드) SELECT o.orderID, c.CName
            FROM Order o
            INNER JOIN Customers ON o.CID = c.CID;

JOIN 내 다양한 JOIN 문 설명 작성
JOIN (= INNER JOIN) : 데이터 베이스에서 여러 테이블 간의 관계를 설정하고 데이터를 결합하는데 사용
             두 개 이상의 테이블을 연결하여 공통된 값을 기준으로 행을 결합
             일치하는 행만 반환
             부서와 직원 테이블을 JOIN하여 각 직원의 부서 정보를 가져옴
LEFT JOIN : 왼쪽 테이블(첫 테이블)의 모든 행을 포함 
            오른쪽 테이블에서 일치하는 행을 선택
            왼쪽 테이블에 있는 모든 행이 결과 집합에 포함되고 오른쪽 테이블과 일치하는 행이 없으면 NULL값 포함 
            왼쪽 테이블의 모든 행을 반환
RIGHT JOIN : 오른쪽 테이블의 모든 행을 포함하고 왼쪽 테이블에서 일치하는 행을 선택
             오른쪽 테이블에 있는 모든 행이 결과 집합 포함
             왼쪽 테이블과 일치하는 행이 없으면 NULL값 포함 
             오른쪽 테이블의 모든 행 반환
FULL JOIN(FULL OUTER JOIN) : 왼쪽 테이블과 오른쪽 테이블의 모든 행을 포함
                             양쪽 테이블의 데이터를 모두 가져옴 
                             일치하는 행이 있는 경우에는 해당 데이터를 포함
                             왼쪽 테이블 또는 오른쪽 테이블의 한쪽에만 있는 데이터는 NULL 값이 포함됨
                             주로 양쪽 테이블의 모든 데이터를 가져와야할 때 사용
                             양쪽 테이블의 모든 행을 반환 

CASE 문
조건에 따라 다른 결과를 반환하는데 사용
CASE문은 주로 SELECT문에서 사용
다양한 조건에 따라 다른 값을 출력하거나 계산하는데 유용
예제 코드 :
CASE
         WHEN 조건1 THEN 결과1 (조건에 따라 표현하고자 하는 결과 작성)
         WHEN 조건2 THEN 결과2
         WHEN 조건n THEN 결과n
ELSE 기본값
END

코드 설명 :
         CASE 다음에 WHEN절을 사용해서 조건을 지정
         조건이 만족되는 경우 해당 조건의 결과를 반환
THEN 조건을 만족했을 때 반환할 결과 값을 지정
여러 WHEN을 사용해서 여러 조건을 처리할 수 있으며, 각 조건에 해당하는 결과를 정의
ELSE 모든 조건이 만족되지 않을 때 반환할 기본값을 정의하는데 사용
         선택사항
END CASE문을 종료함을 나타내는 절 


UNION sql  두개 이상의 SELECT문 결과를 합쳐서 하나의 결과 집합으로 반환하는 연산자
UNION 중복된 행을 제거하고 중복된 행을 포함하지 않는 결과를 생성

SELECT column1, column2,...
FROM table1
UNION
SELECT column1, column2,...
FROM table2;


FETCH : 데이터 조회 및 검색 목적으로 사용 
        데이터베이스에서 특정 행을 가져오거나 결과 집합에서 행을 검색하는데 사용할 수 있음
        일반적으로 SELECT문과 함께 사용되어 결과 집합에서 일부 행을 가져오거나 특정 순서로 정렬된 결과에서 특정 범위의 행을 검색하는데 사용 
예제코드 : 
         --처음에 10개 행을 가져올 때
         SELECT *
         FROM 테이블
         FETCH 10 ROWS ONLY;
         --범위 지정해서 행을 검색할 때
         --10번째부터 20번째 행을 가져올 때
         SELECT *
         FROM 테이블
         OFFSET 10 ROWS
         FETCH NEXT 10 ROWS ONLY;

FETCH FIRST : 처음 10개의 행을 가져옴
              결과 집합의 처음부터 시작하여 지정된 개수의 행을 가져옴
OFFSET 10 ROWS : 처음 10개의 행을 건너뛴 다음에 데이터 검색을 시작함 
FETCH NEXT 10 ROWS ONLY : 그 다음 10개의 행을 가져옴




































